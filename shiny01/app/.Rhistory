runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
# Librerias
suppressPackageStartupMessages({
library("openxlsx")
library("shiny")
library("shinydashboard")
library("shinyjs")
library("DT")
library("Ryacas")
library("Ryacas0")
library("mathjaxr")
library("stringi")
})
source(file = "global.R")
# Definir el directorio donde están los archivos .R
directorio <- "R/fn"
archivos_R <- list.files(path = directorio, pattern = "\\.R$", full.names = TRUE)
sapply(archivos_R, source)
# Definir el directorio donde están los archivos .R
directorio <- "R/modules"
archivos_R <- list.files(path = directorio, pattern = "\\.R$", full.names = TRUE)
sapply(archivos_R, source)
#vector_elemento_valencia <- 1:length(vector_elemento_valencia)
#vector_elemento_valencia <- as.character(vector_elemento_valencia)
data01_names
names(data01_names)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data00_tabla_periodica
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lista_A <- list()
lista_A[[1]] <- TRUE
lista_A[[2]] <- c()
lista_B <- list()
lista_B[[1]] <- FALSE
lista_B[[2]] <- c("En _fq_ no se realiza estequiometria para _name_.")
lista_salida <- lista_A
lista_salida
lista_salida
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
aver <- data.frame(mtcars)
aver
aver[1,]
as.vector(aver[1,])
unlist(as.vector(aver[1,]))
unlist(as.vector(aver[1,]))
unlist(as.vector(aver[1,]))[1]
unlist(as.vector(aver[1,]))[1,1]
runApp()
runApp()
list_armado <- list()
list_armado$vector_coef <- c(2,1,2)
list_armado$vector_sustancias <- c("Li", "O_{2}", "Li_{2}O")
vector_coef <- c(4,1,2)
vector_sustancias <- c("Li", "O_{2}", "Li_{2}O")
outout_list <- op02_estequiometria_oxidos_esp(vector_coef, vector_sustancias)
vector_sustancias
vector_coef
op02_estequiometria_oxidos_esp(vector_coef, vector_sustancias)
vector_coef_alias <- c("_coef1_", "_coef2_", "_coef3_")
# Vector de las sustancias
vector_sustancias02 <- vector_sustancias
vector_sustancias <- paste0("\\(", vector_sustancias, "\\)")
vector_sustancias_alias <- c("_sustancia1_", "_sustancia2_", "_sustancia3_")
vector_coef02 <- vector_coef
vector_coef02[vector_coef02 == 1] <- ""
vector_sustancias02 <- paste0(vector_coef02, " ", vector_sustancias02)
vector_sustancias02 <- paste0("\\(", vector_sustancias02, "\\)")
# Roles
vector_rol <- c("Reactivo", "Reactivo", "Producto")
# Deteccion de gas
dt_gas <- length(gsub("[^0-9]", "", vector_sustancias[1])) == 1
# Molecula o atomo - Moleculas o atomos
vector_rotulo01 <- c(NA, "molécula", "molécula")
vector_rotulo02 <- c(NA, "moléculas", "moléculas")
vector_rotulo01[1] <- ifelse(dt_gas, "molécula", "átomo")
vector_rotulo02[1] <- ifelse(dt_gas, "moléculas", "átomos")
vector_rotulo01_alias <- c("_rotulo01_1_", "_rotulo01_2_", "_rotulo01_3_")
vector_rotulo02_alias <- c("_rotulo02_1_", "_rotulo02_2_", "_rotulo02_3_")
# Mol o moles
vector_moles <- ifelse(vector_coef>1, "moles", "mol")
vector_moles_alias <- c("_mol1_", "_mol2_", "_mol3_")
# Elementos
vector_elementos <- vector_sustancias[c(1,2)]
vector_elementos <- sapply(vector_elementos, function(x) gsub("[^a-zA-Z]", "", x))
#vector_elementos <- sapply(vector_elementos, function(x) {strsplit(x, "")[[1]]})
vector_elementos <- unlist(vector_elementos)
vector_elementos <- unique(vector_elementos)
vector_elementos_alias <- c("_elemento1_", "_elemento2_")
# Posicion de los elementos en la tabla periodica
vector_pos_elementos <- which(data00_tabla_periodica$symbol%in%vector_elementos)
# Peso u.m.a. de los elementos de la tabla
vector_uma <- data00_tabla_periodica$uma_mod[vector_pos_elementos]
vector_uma_alias <- c("_uma1_", "_uma2_")
names(vector_uma) <- vector_elementos
# Peso u.m.a. de los elementos de la tabla
vector_uma <- data00_tabla_periodica$uma_mod[vector_pos_elementos]
vector_uma_alias <- c("_uma1_", "_uma2_")
names(vector_uma) <- vector_elementos
vector_elementos
vector_uma
data00_tabla_periodica
data00_tabla_periodica$uma_mod
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# 00) Tabla periodica
data00_tabla_periodica <- openxlsx::read.xlsx(xlsxFile = "ChemClass_Oso/data00_PeriodicTable_esp.xlsx",
sheet = 1)
data00_tabla_periodica$valence <- as.character(data00_tabla_periodica$valence)
vector_fq_interno <- c("oxidos", "hidroxidos", "acidos",
"hidruros", "oxosales", "sales")
vector_fq_interno_mod <- c("óxidos", "hidróxidos", "ácidos",
"hidruros", "oxosales", "sales")
names(vector_fq_interno_mod) <- vector_fq_interno
vector_fq_externo <- c("1) Óxidos", "2) Hidróxidos", "3) Ácidos",
"4) Hidruros", "5) Oxosales", "6) Sales")
# Opciones de selectInput
vector_familia_quimica <- vector_fq_interno
names(vector_familia_quimica) <- vector_fq_externo
# Names General
data01_names_general <- openxlsx::read.xlsx(xlsxFile = "ChemClass_Oso/data01_names.xlsx",
sheet = 1)
# Names de cada familia Quimica
data02_names_fq <- sapply(2:7, function(x){
openxlsx::read.xlsx(xlsxFile = "ChemClass_Oso/data01_names.xlsx",
sheet = x)
})
names(data02_names_fq) <- vector_fq_interno
###################
vector_reso_folder <- list.dirs("ChemClass_Oso/estequimetria")
vector_reso_folder <- vector_reso_folder[-1]
vector_nombres_folder <- sapply(vector_reso_folder, function(x){
strsplit(x,"/")[[1]][3]
}, USE.NAMES = F)
las_reso <- sapply(vector_reso_folder, function(x){
vector_las_reso <- list.files(x)
sapply(vector_las_reso, function(y){
the_file <- paste0(x, "/", y)
openxlsx::read.xlsx(xlsxFile =  the_file, sheet = 1)
}, simplify = F, USE.NAMES = T)
}, USE.NAMES = T)
las_reso
names(las_reso)
vector_reso_folder
runApp()
runApp()
runApp()
runApp()
runApp()
###############################
vector_reso_folder_new <- list.files("ChemClass_Oso/outputs_global")
vector_reso_folder_new
vector_reso_folder_new <- list.files("ChemClass_Oso/outputs_global")
vector_reso_folder_new <- grep("\\.xlsx$", vector_reso_folder_new, value = TRUE)
vector_reso_folder_new
sort(vector_reso_folder_new)
vector_reso_folder_new <- list.files("ChemClass_Oso/outputs_global")
vector_reso_folder_new <- grep("\\.xlsx$", vector_reso_folder_new, value = TRUE)
vector_reso_folder_new <- sort(vector_reso_folder_new)
vector_reso_folder_new <- list.files("ChemClass_Oso/outputs_global")
vector_reso_folder_new <- grep("\\.xlsx$", vector_reso_folder_new, value = TRUE)
vector_reso_folder_new <- sort(vector_reso_folder_new)
LAS_NUEVAS <- sapply(vector_reso_folder, function(x){
vector_las_reso <- list.files(x)
sapply(vector_las_reso, function(y){
the_file <- paste0(x, "/", y)
openxlsx::read.xlsx(xlsxFile =  the_file, sheet = 1)
}, simplify = F, USE.NAMES = T)
}, USE.NAMES = T)
vector_reso_folder_new <- list.files("ChemClass_Oso/outputs_global")
vector_reso_folder_new <- grep("\\.xlsx$", vector_reso_folder_new, value = TRUE)
vector_reso_folder_new <- sort(vector_reso_folder_new)
LAS_NUEVAS <- sapply(vector_reso_folder_new, function(x){
openxlsx::read.xlsx(xlsxFile =  x, sheet = 1)
}, USE.NAMES = T)
###############################
vector_reso_folder_new <- list.files("ChemClass_Oso/outputs_global")
vector_reso_folder_new <- grep("\\.xlsx$", vector_reso_folder_new, value = TRUE)
vector_reso_folder_new <- sort(vector_reso_folder_new)
vector_reso_folder_new
###############################
vector_reso_folder_new <- list.files("ChemClass_Oso/outputs_global", full.names = T)
vector_reso_folder_new <- grep("\\.xlsx$", vector_reso_folder_new, value = TRUE)
vector_reso_folder_new <- sort(vector_reso_folder_new)
LAS_NUEVAS <- sapply(vector_reso_folder_new, function(x){
openxlsx::read.xlsx(xlsxFile =  x, sheet = 1)
}, USE.NAMES = T)
vector_reso_folder_new <- list.files("ChemClass_Oso/outputs_global", full.names = T)
vector_reso_folder_new <- grep("\\.xlsx$", vector_reso_folder_new, value = TRUE)
vector_reso_folder_new <- sort(vector_reso_folder_new)
LAS_NUEVAS <- sapply(vector_reso_folder_new, function(x){
openxlsx::read.xlsx(xlsxFile =  x, sheet = 1)
}, USE.NAMES = T)
names(LAS_NUEVAS) <- vector_fq_interno
# 00) Tabla periodica
data00_tabla_periodica <- openxlsx::read.xlsx(xlsxFile = "ChemClass_Oso/data00_PeriodicTable_esp.xlsx",
sheet = 1)
data00_tabla_periodica$valence <- as.character(data00_tabla_periodica$valence)
vector_fq_interno <- c("oxidos", "hidroxidos", "acidos",
"hidruros", "oxosales", "sales")
vector_fq_interno_mod <- c("óxidos", "hidróxidos", "ácidos",
"hidruros", "oxosales", "sales")
names(vector_fq_interno_mod) <- vector_fq_interno
vector_fq_externo <- c("1) Óxidos", "2) Hidróxidos", "3) Ácidos",
"4) Hidruros", "5) Oxosales", "6) Sales")
# Opciones de selectInput
vector_familia_quimica <- vector_fq_interno
names(vector_familia_quimica) <- vector_fq_externo
# Names General
data01_names_general <- openxlsx::read.xlsx(xlsxFile = "ChemClass_Oso/data01_names.xlsx",
sheet = 1)
# Names de cada familia Quimica
data02_names_fq <- sapply(2:7, function(x){
openxlsx::read.xlsx(xlsxFile = "ChemClass_Oso/data01_names.xlsx",
sheet = x)
})
names(data02_names_fq) <- vector_fq_interno
###############################
vector_reso_folder_new <- list.files("ChemClass_Oso/outputs_global", full.names = T)
vector_reso_folder_new <- grep("\\.xlsx$", vector_reso_folder_new, value = TRUE)
vector_reso_folder_new <- sort(vector_reso_folder_new)
LAS_NUEVAS <- sapply(vector_reso_folder_new, function(x){
openxlsx::read.xlsx(xlsxFile =  x, sheet = 1)
}, USE.NAMES = T)
names(LAS_NUEVAS) <- vector_fq_interno
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
vector_familia_quimica
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data01_names_general
runApp()
data01_names_general_mod <- openxlsx::read.xlsx(xlsxFile = "ChemClass_Oso/v2/data01_names.xlsx",
sheet = 1)
runApp()
runApp()
data01_names_general_mod$dt_hidroxido
vector_mod1 <- vector_elemento[as.logical(data01_names_general_mod$dt_hidroxido)]
vector_mod2 <- vector_elemento[as.logical(data01_names_general_mod$dt_hidracido)]
runApp()
vector_elemento
as.logical(data01_names_general_mod$dt_hidracido)
vector_mod1 <- data01_names_general_mod$symbol
vector_mod1 <- vector_mod1[as.logical(data01_names_general_mod$dt_hidroxido)]
vector_mod1 <- unique(vector_mod1)
vector_mod2 <- data01_names_general_mod$symbol
vector_mod2 <- vector_mod1[as.logical(data01_names_general_mod$dt_oxacido)]
vector_mod2 <- unique(vector_mod2)
vector_mod2
vector_mod1
vector_mod1 <- data01_names_general_mod$symbol
vector_mod1 <- vector_mod1[as.logical(data01_names_general_mod$dt_hidroxido)]
vector_mod1 <- unique(vector_mod1)
vector_mod1 <- na.omit(vector_mod1)
vector_mod2 <- data01_names_general_mod$symbol
vector_mod2 <- vector_mod1[as.logical(data01_names_general_mod$dt_oxacido)]
vector_mod2 <- unique(vector_mod2)
vector_mod2 <- na.omit(vector_mod2)
vector_mod2
vector_mod1
vector_mod2
data01_names_general_mod
data01_names_general_mod$dt_oxacido
as.logical(data01_names_general_mod$dt_oxacido)
vector_mod2 <- data01_names_general_mod$symbol
vector_mod2 <- vector_mod2[as.logical(data01_names_general_mod$dt_oxacido)]
vector_mod2 <- unique(vector_mod2)
vector_mod2 <- na.omit(vector_mod2)
vector_mod2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data01_names_general_mod$dt_hidracido
data01_names_general_mod$dt_hidracido
vector_mod2[as.logical(data01_names_general_mod$dt_hidracido)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(tapLock)
install.packages("talLock")
install.packages("tapLock")
library(shiny)
library(tapLock)
auth_config <- new_openid_config(
provider = "google",
client_id = Sys.getenv("CLIENT_ID"),
client_secret = Sys.getenv("CLIENT_SECRET"),
app_url = Sys.getenv("APP_URL")
)
ui <- fluidPage(
tags$h1("r.sso example"),
uiOutput("profile"),
textOutput("user")
)
server <- function(input, output, session) {
output$profile <- renderUI({
tags$img(src = get_token_field(token(), "picture"))
})
output$user <- renderText({
given_name <- get_token_field(token(), "given_name")
family_name <- get_token_field(token(), "family_name")
expires_at <- expires_at(token())
glue::glue(
"Hello {given_name} {family_name}!",
"Your authenticated session will expire at {expires_at}.",
.sep = " "
)
}) |>
bindEvent(TRUE)
}
shinyApp(ui, server) |>
tower::create_tower() |>
tapLock::add_auth_layers(auth_config) |>
tower::build_tower()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
aver <- colnames(mtcars)
names(aver) <- colnames(mtcars)
unique(aver)
aver <- colnames(mtcars)
names(aver) <- colnames(mtcars)
runApp()
LAS_NUEVAS[[length(LAS_NUEVAS)]]
runApp()
runApp()
